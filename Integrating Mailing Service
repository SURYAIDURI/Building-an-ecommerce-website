ALTER TABLE users
    ADD reset_password_token VARCHAR(128) UNIQUE,
    ADD reset_password_expires BIGINT,
    ADD reset_password_token_used BOOLEAN;
    
    const Validator = require("validator");
const ifEmpty = require("./checkForEmpty");

module.exports = function validateResetInput(data) {
  let errors = {};

  data.email = !ifEmpty(data.email) ? data.email : "";

  if (Validator.isEmpty(data.email)) {
    errors.email = "Email is required";
  }
  if (!Validator.isEmail(data.email)) {
    errors.email = " Email is invalid";
  }
  return {
    errors,
    isValid: ifEmpty(errors)
  };
};


const validateResetInput = require("../../validation/checkEmail");


router.post("/forgot", function(req, res) {
  const {errors, isValid } = validateResetInput(req.body);

  if (!isValid) {
    return res.status(400).json(errors);
  }
  let resetToken;
  crypto.randomBytes(48, (err, buf) => {
    if (err) throw err;
    resetToken = buf.toString("hex");
    return resetToken;
  });
  
  
  
  database
    .table("users")
    .select("*")
    .where("email", req.body.email)
    .then(emailData => {
      if (emailData.length == 0) {
        res.status(400).json("Invalid email address");
      } else {
      
      
      database
          .table("users")
          .where("email", emailData[0].email)
          .update({
            reset_password_token: resetToken,
            reset_password_expires: Date.now(),
            reset_password_token_used: false
          })
          
          
           .then(done => {
            let to = [req.body.email];

            let link = "https://yourWebsite/v1/users/verify/" + resetToken;

            let sub = "Reset Password";

            let content =
              "<body><p>Please reset your password.</p> <a href=" +
              link +
              ">Reset Password</a></body>";
            //Passing the details of the email to a function allows us to generalize the email sending function
            sendEmail.Email(to, sub, content);

            res.status(200).json("Please check your email for the reset password link");
          })
          .catch(err => {
            res.status(400).json("Bad Request");
          });
      }
    })
    .catch(err => {
      res.status(400).json("Bad Request");
    });
});


const Validator = require("validator");
const ifEmpty = require("./checkForEmpty");

module.exports = function validateResetInput(data) {
  let errors = {};

  data.password1 = !ifEmpty(data.password1) ? data.password1 : "";
  data.password2 = !ifEmpty(data.password2) ? data.password2 : "";

  if (Validator.isEmpty(data.password1)) {
    errors.password1 = "Password is required";
  }
  if (!Validator.isLength(data.password1, { min: 8, max: 120 })) {
    errors.password1 = "Passwords must be at least 8 characters";
  }
  if (Validator.isEmpty(data.password2)) {
    errors.password2 = "Confirm password is required";
  }
  if (!Validator.equals(data.password1, data.password2)) {
    errors.password2 = "Passwords must match";
  }
  return {
    errors,
    isValid: ifEmpty(errors)
  };
};


const validatePasswordChange = require("../../validation/newPassword");


